# RobotDreams-Full_stack
Kurz programování základy full-stack developer - React, TypeScript, základy html, css, js

001: 
📚 **Souhrn lekce: Architektura webových aplikací**
🎯 Co jsme se naučili
1. Architektura klient-server

Základní princip: Server poskytuje služby, klient je využívá
Komunikační cyklus:

Klient pošle požadavek
Server zpracuje a odpoví
Klient zpracuje odpověď


Moderní přístup: Využití API gateway pro agregaci requestů, autentizaci, load balancing a monitoring

2. REST API

Principy REST:

Jednotné rozhraní s unikátními URI pro každý resource
Bezestavová komunikace
Využití HTTP metod (CRUD operace)
Vícevrstvá architektura s možností cache


HTTP metody:

GET (čtení) - idempotentní
POST (vytvoření)
PUT/PATCH (aktualizace) - PUT je idempotentní
DELETE (mazání) - idempotentní


HTTP stavové kódy:

2xx = úspěch (200 OK, 201 Created)
4xx = chyba klienta (404 Not Found, 400 Bad Request)
5xx = chyba serveru


HATEOAS: Odpovědi obsahují odkazy pro navigaci API

3. GraphQL

Výhody:

Jeden endpoint pro všechny dotazy
Klient si vybere přesně ta data, která potřebuje
Silná typovost se schématem
Možnost mutací pro správu více objektů najednou


Nevýhody:

Komplexnější implementace
Větší zatížení serveru
Ne všichni klienti podporují



4. WebSockets

Charakteristika: Obousměrná, trvalá komunikace
Použití: Real-time aplikace (chat, notifikace, live data)
Proces:

HTTP handshake
Upgrade na WS protokol
Obousměrná komunikace
Ukončení spojení


Výzvy: Škálování (vertikální vs. horizontální), správa stavu

5. Server-Sent Events (SSE)

Charakteristika: Jednosměrná komunikace server → klient
Výhody: Jednoduchá implementace, nízká latence, funguje přes HTTP
Použití: Live aktualizace, notifikace, streaming dat

6. SPA vs SSR

Single Page Application (SPA):

✅ Rychlé přechody, offline mód, menší zátěž serveru
❌ SEO problémy, pomalé první načtení


Server Side Rendering (SSR):

✅ Lepší SEO, rychlejší první načtení
❌ Větší zátěž serveru, složitější implementace


Hybridní přístup: Server renderuje hlavní obsah, klient dotahuje vedlejší data

💪 Co byste měli nyní ovládat

Vysvětlit rozdíl mezi klientem a serverem v kontextu webových aplikací
Navrhnout jednoduché REST API včetně:

Správných HTTP metod pro CRUD operace
Vhodných stavových kódů
Struktury URI pro resources


Rozhodnout kdy použít:

REST API vs GraphQL
WebSockets vs Server-Sent Events
SPA vs SSR


Identifikovat výhody a nevýhody jednotlivých přístupů
Pochopit principy:

Bezestavové komunikace
Idempotence HTTP metod
HATEOAS pro REST API


Prakticky aplikovat znalosti při:

Návrhu API endpointů
Výběru vhodné komunikační technologie
Rozhodování o architektuře aplikace



🚀 Doporučené kroky k procvičení

Vytvořte jednoduché REST API pro správu úkolů (TODO list)
Implementujte WebSocket chat aplikaci
Vyzkoušejte Server-Sent Events pro live notifikace
Porovnejte výkon SPA vs SSR aplikace
Napište GraphQL schéma pro váš projekt

002:
**📚 Souhrn lekce: Git a GitHub**
🎯 Co jsme se naučili
1. Základy Gitu

Co je Git: Open-source distribuovaný systém pro správu verzí
Klíčové vlastnosti:

Zaznamenává všechny změny ve všech souborech
Každý vývojář má kompletní historii lokálně
Možnost práce offline


Základní pojmy:

Repozitář: Úložiště všech souborů a historie projektu
Commit: Zaznamenaná změna v repozitáři
Branch: Větev pro paralelní vývoj
Merge: Sloučení změn z různých větví
Push/Pull: Synchronizace s vzdáleným repozitářem
Staging area: Příprava commitů před push



2. Způsoby ovládání Gitu

Příkazová řádka

Vždy stejné použití napříč systémy
Základní znalost příkazů pomáhá pochopit fungování


IDE (vývojové prostředí)

Zjednodušuje komplexní akce
Grafické rozhraní pro řešení konfliktů, rebase atd.


Webové prostředí

GitHub, GitLab
Umožňuje základní práci s repozitářem
GitHub Codespaces pro komplexnější úpravy



3. Základní Git příkazy
Základní workflow:
bashgit clone [url]           # Naklonování repozitáře
git add index.js          # Přidání souboru do staging area
git commit -m "zpráva"    # Vytvoření commitu
git pull                  # Stažení změn ze serveru
git push                  # Nahrání změn na server
Práce s větvemi:
bashgit checkout -b nova_branch  # Vytvoření a přepnutí na novou větev
git checkout master          # Přepnutí na master
git branch -d nova_branch    # Smazání lokální větve
git push origin --delete nova_branch  # Smazání vzdálené větve
Užitečné příkazy:
bashgit log                      # Historie commitů
git stash -u && git stash drop  # Zahodit necommitnuté změny
git reset HEAD^              # Zrušit poslední commit (zachovat změny)
git cherry-pick             # Vybrat specifický commit
4. Merge vs Rebase

Merge:

✅ Zachovává historii
✅ Bezpečnější pro sdílené větve
❌ Vytváří merge commity
❌ Složitější historie


Rebase:

✅ Lineární historie
✅ Čistší graf commitů
❌ Přepisuje historii
❌ Nebezpečné pro sdílené větve



5. Git Flow vs GitHub Flow

Git Flow: Komplexnější workflow s více typy větví (master, develop, feature, release, hotfix)
GitHub Flow: Jednodušší - pouze master a feature větve

6. Git Hooks

Client-side hooky: Spouští se lokálně (např. pre-commit)
Server-side hooky: Spouští se na serveru (např. post-receive)
Využití: Automatické formátování, statická analýza, testy
Husky: Knihovna pro snadnou správu hooků

💪 Co byste měli nyní ovládat

Základní Git workflow:

Klonování repozitáře
Vytváření commitů
Push a pull změn
Práce s větvemi


Řešení běžných situací:

Vytvoření a smazání větve
Sloučení větví (merge)
Zahodit nechtěné změny
Vrátit se k předchozímu stavu


Pochopení konceptů:

Rozdíl mezi lokálním a vzdáleným repozitářem
Staging area a její účel
Kdy použít merge vs rebase
Výhody distribuovaného systému


Práce v týmu:

Pull requesty
Řešení konfliktů
Výběr vhodného workflow



🚀 Doporučené kroky k procvičení

Vytvořte si vlastní repozitář na GitHubu a vyzkoušejte základní příkazy
Simulujte konflikt vytvořením změn ve dvou větvích a vyřešte ho
Nastavte pre-commit hook pomocí Husky pro automatické formátování kódu
Vyzkoušejte rebase na testovací větvi
Přispějte do open-source projektu pomocí pull requestu

⚠️ Důležitá upozornění

Nikdy nedělejte rebase na sdílených větvích (master/main)
Vždy si před nebezpečnými operacemi vytvořte zálohu
Pište smysluplné commit zprávy - pomůže vám i kolegům v budoucnu
Commitujte často, ale logické celky
Před pushem vždy zkontrolujte, co posíláte (git status, git diff)

003:
**📚 Souhrn lekce: Node.js, správa balíčků a ESLint**
🎯 Co jsme se naučili
1. Node.js

Co je Node.js: Prostředí pro spouštění JavaScriptu na serveru
Klíčové vlastnosti:

Využívá V8 engine (stejný jako Chrome)
Asynchronní I/O operace
Event-driven architektura
Původně jednovláknový, nyní s podporou worker threadů
Jednotné prostředí pro server i klient


Alternativy:

Deno: Bezpečnější, TypeScript out-of-the-box
Bun: Rychlejší, all-in-one řešení



2. Správa balíčků

Historie: NPM pro server, Bower pro klienta (již neaktuální)
Současné package managery:
NPM (Node Package Manager):

✅ Výchozí, součást Node.js
✅ Největší ekosystém
❌ Pomalejší než alternativy

Yarn:

✅ Rychlejší instalace
✅ Lepší práce s licencemi
✅ Offline mód

PNPM:

✅ Úspornější (sdílené dependencies)
✅ Rychlý
✅ Striktní node_modules struktura


Pomocné soubory:

package-lock.json / yarn.lock - zamykají verze
.npmrc / .yarnrc - konfigurace


NPX: Spouštění balíčků bez instalace
bashnpx create-react-app my-app


3. Package.json

Účel: Centrální konfigurační soubor projektu
Klíčové sekce:
json{
  "name": "muj-projekt",
  "version": "1.0.0",
  "description": "Popis projektu",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "test": "jest",
    "build": "webpack"
  },
  "dependencies": {
    "express": "^4.18.0"
  },
  "devDependencies": {
    "eslint": "^8.0.0"
  },
  "author": "Jméno",
  "license": "ISC"
}


4. Best practices pro správu balíčků

❌ Neinstalovat knihovny pro maličkosti
✅ Používat devDependencies pro vývojové nástroje
⚠️ Pozor na:

Mrtvé projekty (žádné updaty)
One-man projekty (riziková údržba)
Příliš mnoho dependencies (bezpečnost, výkon)


🔄 Pravidelně aktualizovat kvůli bezpečnosti

5. Husky

Účel: Správa Git hooks verzovaná v repozitáři
Výhody:

Hooky jsou součástí projektu
Automatická instalace pro všechny vývojáře
Jednoduché nastavení


Typické použití:

Pre-commit: formátování, linting
Pre-push: testy
Commit-msg: validace commit zpráv



6. ESLint

Co je ESLint: Nástroj pro statickou analýzu JavaScriptu
Funkce:

Vynucuje coding standards
Nachází potenciální chyby
Automatické opravy


Typy hlášení:

Error: Musí se opravit
Warning: Doporučení k opravě


Integrace:

IDE (real-time feedback)
Build proces
Pre-commit hook
CI/CD pipeline



💪 Co byste měli nyní ovládat

Node.js základy:

Spustit JavaScript soubor v Node.js
Pochopit rozdíl mezi Node.js a prohlížečem
Základní debugging v Node.js


Správa závislostí:

Inicializovat nový projekt (npm init)
Instalovat a odinstalovat balíčky
Rozdíl mezi dependencies a devDependencies
Používat npm scripts


Package.json:

Vytvořit a upravit package.json
Definovat vlastní scripts
Správně verzovat projekt


ESLint:

Nastavit ESLint v projektu
Vybrat vhodný preset (Airbnb, Standard, atd.)
Vytvořit vlastní pravidla
Integrovat s IDE


Husky:

Nastavit pre-commit hook
Kombinovat s ESLintem a Prettierem



🚀 Doporučené kroky k procvičení

Vytvořte Node.js projekt s Express serverem
Nastavte ESLint s Airbnb konfigurací
Přidejte Husky s pre-commit hookem pro ESLint
Vytvořte npm scripts pro:

Spuštění serveru
Linting
Automatické opravy


Experimentujte s NPX - spusťte různé CLI nástroje

📋 Praktické příkazy
bash# Inicializace projektu
npm init -y

Instalace dependencies
npm install express
npm install --save-dev eslint husky

NPM scripts
npm run start
npm run lint
npm run lint:fix

NPX použití
npx eslint --init
npx create-react-app my-app

Yarn alternativy
yarn add express
yarn add -D eslint

PNPM alternativy
pnpm add express
pnpm add -D eslint
⚠️ Důležitá upozornění

Vždy commitujte lock soubory (package-lock.json)
Necommitujte node_modules složku
Pravidelně auditujte závislosti: npm audit
Používejte .nvmrc pro specifikaci Node.js verze
Dokumentujte npm scripts v README

<!-- 004: 
**📚 Souhrn lekce: HTML**
🎯 Co jsme se naučili
1. Základy HTML

HTML = HyperText Markup Language
3 základní koncepty:

HTML element - část stránky (např. nadpis, odstavec)
HTML tag - značka pro zápis elementů

Párové: <p>text</p>
Samouzavírací: <br/>
Blokové vs inline


Atributy - dodatečné informace u tagů


Sémantika: Tagy nesou význam

<h1></h1> = nejdůležitější nadpis
<strong> vs <b> (důležité vs pouze tučné)



2. Základní struktura HTML dokumentu
html<!DOCTYPE html>
<html lang="cs" dir="ltr">
<head>
    <title>Moje stránka</title>
    <meta charset="utf-8" />
</head>
<body>
    <h1 id="title">Vítejte na mé stránce!</h1>
    <p>Toto je odstavec textu.</p>
    <!-- komentář -->
</body>
</html>
3. DOM (Document Object Model)

Co je DOM: Reprezentace HTML jako stromu objektů
Struktura:

Kořen: document
Uzly: Element, Attribute, Text, Comment


Využití:

Vyhledávání prvků
Změna stylů
Manipulace s obsahem


Důležité: Vliv na výkon stránky

4. Hlavní části dokumentu
<head></head>:

Metadata dokumentu
Není vidět na stránce (kromě <title>)
Obsahuje:

<link> - externí styly
<style> - interní styly
<script> - skripty
<meta> - metadata



<body></body>:

Viditelný obsah stránky
Může obsahovat i styly a skripty

5. HTML atributy

Typy atributů:

Povinné: specifické pro tag (např. src u <img>)
Globální: použitelné kdekoliv (class, id, onclick)
Volitelné: specifické nebo vlastní (data-*)



6. Formátování textu
Nadpisy:

<h1> až <h6> (h1 pouze 1x na stránce)

Zvýraznění:

<strong> / <b></b> - tučný text
<em> / <i></i> - kurzíva
<span></span> - inline kontejner

Bloky:

<div></div> - obecný kontejner
<p></p> - odstavec
<section>, <article>, <aside>, <nav> - sémantické bloky

Seznamy:
html<!-- Číslovaný seznam -->
<ol>
    <li>První položka</li>
    <li>Druhá položka</li>
</ol>

<!-- Odrážkový seznam -->
<ul>
    <li>Položka</li>
    <li>Další položka</li>
</ul>
7. Obrázky a odkazy
html<!-- Responsivní obrázek -->
<picture>
    <source media="(min-width: 650px)" srcset="velky.jpg">
    <source srcset="maly.jpg">
    <img src="fallback.jpg" alt="Popis obrázku">
</picture>

<!-- Odkazy -->
<a href="#sekce">Interní odkaz</a>
<a href="https://example.com" target="_blank">Externí odkaz</a>
8. Tabulky
html<table>
    <caption>Popisek tabulky</caption>
    <thead>
        <tr>
            <th>Jméno</th>
            <th>Email</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Jan</td>
            <td>jan@email.cz</td>
        </tr>
    </tbody>
    <tfoot>
        <tr>
            <th colspan="2">Celkem uživatelů</th>
        </tr>
    </tfoot>
</table>
9. DevTools

Nástroj pro vývojáře v prohlížeči
Funkce:

Zobrazení HTML a CSS
Úprava v reálném čase
Debugging JavaScriptu
Network tab - HTTP požadavky
Console - výpisy a chyby
Performance profiling



💪 Co byste měli nyní ovládat

Vytvořit základní HTML strukturu z hlavy
Používat správné sémantické tagy pro různý obsah
Pracovat s atributy (id, class, data-*)
Formátovat text pomocí správných tagů
Vytvářet seznamy a tabulky
Vkládat obrázky včetně responsivních variant
Vytvářet odkazy (interní i externí)
Používat DevTools pro inspekci a úpravu stránky
Rozumět DOM struktuře a její hierarchii

🚀 Doporučené kroky k procvičení

Vytvořte osobní vizitku pouze v HTML:

Použijte všechny typy nadpisů
Přidejte obrázek s alt textem
Vytvořte seznam dovedností
Přidejte tabulku s kontakty


Analyzujte existující web pomocí DevTools:

Prozkoumejte DOM strukturu
Identifikujte sémantické tagy
Zkuste upravit obsah v DevTools


Vytvořte blog post s:

Správnou hierarchií nadpisů
Obrázky s picture elementem
Citacemi a zvýrazněným textem
Navigací pomocí odkazů



⚠️ Důležitá upozornění

Vždy používejte DOCTYPE html
Specifikujte jazyk pomocí lang atributu
Nezapomeňte na charset="utf-8"
Používejte sémantické tagy místo div všude
Alt text u obrázků je povinný pro přístupnost
H1 pouze jednou na stránce
Validujte HTML pomocí W3C validátoru

📋 Nejčastější chyby začátečníků

❌ Zapomínání uzavírat párové tagy
❌ Špatné vnořování elementů
❌ Používání pouze <div> místo sémantických tagů
❌ Chybějící alt atributy u obrázků
❌ Více H1 na jedné stránce
❌ Inline styly místo CSS
❌ Nevalidní HTML struktura */

005: 
**📚 Souhrn lekce: HTML - speciální znaky, přístupnost a formuláře**
🎯 Co jsme se naučili
1. Speciální znaky v HTML

Účel: Znaky, které nelze napsat přímo kvůli speciálnímu významu v HTML
Zápis:

Začínají & a končí ;
Unicode: &#65; (desítkový) nebo &#x41; (hexadecimální)


Nejčastější HTML entity:
html< = &lt;        (less than)
> = &gt;        (greater than)
& = &amp;       (ampersand)
" = &quot;      (quote)
' = &apos;      (apostrophe)
≤ = &le;        (less or equal)
≥ = &ge;        (greater or equal)

Tip: Běžné znaky (včetně emoji ✅) lze psát přímo, unicode jen pro speciální případy

2. HTML formuláře

Základní struktura:
html<form action="/odeslat" method="post">
  <label for="jmeno">Jméno:</label>
  <input type="text" required pattern="[A-Za-z]{3,}" 
         id="jmeno" name="jmeno">
  
  <label for="email">Email:</label>
  <input type="email" id="email" name="email">
  
  <input type="submit" value="Odeslat">
</form>

Výhody použití <form>:

Odeslání po stisku Enter
Základní validace v prohlížeči
Lepší přístupnost a sémantika
Snazší práce s JavaScriptem


Formulářové prvky:

<input> - různé typy (text, password, email, number, date, radio, checkbox...)
<label> - popisek prvku (vždy používat!)
<select> + <option> - rozbalovací seznam
<textarea> - víceřádkový text
<button> - tlačítko (type: submit, button, reset)
<fieldset> + <legend> - seskupení prvků


⚠️ DŮLEŽITÉ: Nikdy nespoléhat pouze na validaci na klientovi!

3. Přístupnost webu (a11y)

WCAG = Web Content Accessibility Guidelines
4 základní principy:

Vnímatelnost:

Textové alternativy pro netextový obsah
Alt texty u obrázků
Přepisy videa/audia
Dostatečný kontrast


Ovladatelnost:

Vše ovladatelné klávesnicí
Dostatek času na akce
Žádné blikající prvky (záchvaty)
Jasná navigace


Srozumitelnost:

Čitelný a jasný text
Určený jazyk stránky
Intuitivní ovládání
Pomoc při chybách


Robustnost:

Validní HTML
Kompatibilita s asistivními technologiemi




Úrovně přístupnosti:

A (základní) - ~32 pravidel
AA (doporučená) - ~56 pravidel
AAA (nejvyšší) - ~87 pravidel



4. ARIA (Accessible Rich Internet Applications)

Účel: Doplnění HTML o informace pro asistivní technologie
Kdy používat: Když standardní HTML elementy nestačí
Základní atributy:
htmlaria-label="Popis prvku"
aria-labelledby="id-popisu"
aria-describedby="id-nápovědy"
aria-hidden="true"
role="button"
aria-expanded="false"
aria-selected="true"

Zlaté pravidlo: Používat standardní HTML elementy, ARIA jen když je to nutné

💪 Co byste měli nyní ovládat

Speciální znaky:

Kdy a jak používat HTML entity
Základní entity pro < > & " '
Unicode zápis pro speciální znaky


Formuláře:

Vytvořit kompletní formulář s validací
Správně propojit label s input
Používat vhodné typy inputů
Strukturovat formulář pomocí fieldset


Přístupnost:

Základní principy WCAG
Testovat ovládání klávesnicí
Psát alt texty a aria-label
Používat sémantické HTML


Testování:

Používat nástroje jako WAVE nebo Lighthouse
Testovat s klávesnicí (Tab navigace)
Zkontrolovat kontrasty



🚀 Doporučené kroky k procvičení

Vytvořte přístupný formulář:
html- Registrační formulář s různými typy polí
- Správná validace a error handling
- Fieldset pro skupiny polí
- ARIA atributy pro dynamické prvky

Otestujte přístupnost:

Projděte celý web pouze klávesnicí
Spusťte WAVE nebo Lighthouse audit
Zkuste screen reader


Vylepšete existující stránku:

Přidejte alt texty
Opravte kontrasty
Zajistěte keyboard navigaci
Přidejte ARIA kde je potřeba



⚠️ Důležitá upozornění

Vždy validujte na serveru - klientská validace je jen UX vylepšení
Label je povinný pro každý input (nebo aria-label)
Nepoužívejte placeholder jako náhradu labelu
Testujte s vypnutým CSS - obsah musí dávat smysl
ARIA nenahrazuje správné HTML - první volba je vždy sémantické HTML
Kontrast textu minimálně 4.5:1 (AA), ideálně 7:1 (AAA)

📋 Best practices pro formuláře
html<!-- DOBŘE -->
<label for="email">Email:</label>
<input type="email" id="email" name="email" required>
<span class="error" role="alert">Zadejte platný email</span>

<!-- ŠPATNĚ -->
<input type="text" placeholder="Email">
🔧 Nástroje pro testování přístupnosti

Rozšíření prohlížeče:

WAVE
axe DevTools
Lighthouse (Chrome DevTools)


Screen readery:

NVDA (Windows, zdarma)
JAWS (Windows, placený)
VoiceOver (macOS/iOS)
TalkBack (Android)


Online nástroje:

WebAIM Contrast Checker
WAVE online
Pa11y command line tool



📝 Checklist přístupnosti

 Všechny obrázky mají alt text
 Všechny formulářové prvky mají label
 Web je ovladatelný pouze klávesnicí
 Kontrasty splňují WCAG AA
 Stránka má správnou hierarchii nadpisů
 Odkazy dávají smysl i mimo kontext
 Chybové hlášky jsou jasné a pomocné
 HTML je validní
 Jazyk stránky je určený

006: 
**📚 Souhrn lekce: Kaskádové styly - CSS**
🎯 Co jsme se naučili
1. Základy CSS

CSS = Cascading Style Sheets - jazyk pro popis vzhledu HTML dokumentů
Účel: Oddělení obsahu (HTML) od vzhledu (CSS)
Základní principy:

Definice pomocí vlastností a hodnot
Každý element = box (box model)
Selektory určují, co stylujeme
CSS proměnné pro ukládání hodnot
Dědičnost a specificita



css--main-bg-color: #ff0000;

body {
  color: red;
  background: var(--main-bg-color);
  font-size: 12px;
}

body .section {
  background-color: #00ff00;
  font-size: 14px;
}
2. Způsoby načítání CSS

Inline CSS (nejvyšší specificita):
html<p style="color: blue">Modrý text</p>
❌ Problém se separací, pomalé načítání
Interní CSS:
html<style>
  p { color: blue; }
</style>
❌ Problém s cachováním
Externí CSS ✅ (doporučené):
html<link rel="stylesheet" href="style.css">
✅ Lze cachovat, rozdělit soubory

3. Box Model

Komponenty: Content → Padding → Border → Margin
box-sizing:

content-box (výchozí): width = pouze obsah
border-box: width = obsah + padding + border


Důležité: Ovlivňuje i velikost zjištěnou JavaScriptem

4. CSS Selektory
css/* Element selektor */
div { }

/* ID selektor */
#header { }

/* Class selektor */
.header { }

/* Potomek */
body div { }

/* Přímý potomek */
body > div { }

/* Atribut selektory */
div[label] { }              /* má atribut */
div[label$="konec"] { }     /* končí na */
div[label^="zacatek"] { }   /* začíná na */
div[label~="nekde"] { }     /* obsahuje slovo */

/* Pseudotřídy */
button:hover { }
input:focus { }

/* Pseudoelementy */
p::first-line { }
p::before { }

/* Složené selektory */
div.header { }    /* div s třídou header */
div, p { }        /* div NEBO p */
5. Media Queries a moderní CSS
css/* Responzivní design */
@media (max-width: 768px) {
  /* Styly pro mobily */
}

@media (max-width: 768px) and (orientation: landscape) {
  /* Kombinace podmínek */
}

/* CSS Custom Properties s typovou kontrolou */
@property --item-size {
  syntax: "<percentage>";
  inherits: true;
  initial-value: 40%;
}

/* Scope - omezení platnosti stylů */
@scope (.divA) {
  .heading { color: red; }
}
6. CSS Preprocesory

Historie: Less (2009), Sass (2006)
Funkce: proměnné, vnořování, mixiny, funkce
Současnost: Mnoho funkcí už má nativní CSS
Nevýhody:

Extra build krok
Další jazyk k učení
Může přidat zbytečnou komplexitu



7. Flexbox - jednodimenzionální layout
css/* Flex kontejner */
.container {
  display: flex;
  flex-direction: row;        /* row | column */
  flex-wrap: wrap;           /* wrap | nowrap */
  justify-content: center;    /* hlavní osa */
  align-items: center;       /* příčná osa */
  gap: 10px;                 /* mezery */
}

/* Flex položky */
.item {
  order: 1;                  /* pořadí */
  flex-grow: 1;              /* růst */
  flex-shrink: 0;            /* smršťování */
  align-self: flex-start;    /* vlastní zarovnání */
}
8. Grid - dvoudimenzionální layout
css/* Grid kontejner */
.container {
  display: grid;
  grid-template-columns: 100px 1fr 1fr;  /* 3 sloupce */
  grid-template-rows: auto 200px;        /* 2 řádky */
  gap: 20px;
}

/* Grid položky */
.item {
  grid-column: 1 / 3;      /* zabírá sloupce 1-2 */
  grid-row: 1 / 2;         /* zabírá řádek 1 */
}
💪 Co byste měli nyní ovládat

CSS základy:

Napsat externí stylesheet
Používat CSS proměnné
Rozumět box modelu
Aplikovat základní vlastnosti


Selektory:

Používat všechny typy selektorů
Kombinovat selektory efektivně
Rozumět specificitě
Používat pseudotřídy a pseudoelementy


Responzivní design:

Psát media queries
Mobile-first přístup
Breakpointy pro různá zařízení


Layout systémy:

Flexbox pro jednodimenzionální layout
Grid pro dvoudimenzionální layout
Kdy použít který systém


Debugging:

Používat DevTools pro CSS
Inspektovat box model
Testovat responzivitu



🚀 Doporučené kroky k procvičení

Vytvořte responzivní layout:

Header s navigací (flexbox)
Hlavní obsah s postranním panelem (grid)
Responzivní pro mobil/tablet/desktop


CSS proměnné a témování:
css:root {
  --primary-color: #007bff;
  --spacing-unit: 8px;
  --font-size-base: 16px;
}

Flexbox cvičení:

Centrování obsahu
Rovnoměrné rozmístění položek
Responzivní navigace


Grid cvičení:

Fotogalerie
Dashboard layout
Časopis layout



⚠️ Důležitá upozornění

Specificita: ID > Class > Element
!important používejte jen v krajním případě
Vendor prefixy jen když nutné (-webkit-, -moz-)
Mobile-first: Začněte s mobilním designem
Nepřepisujte výchozí styly zbytečně
BEM metodologie pro pojmenování tříd

📋 CSS vlastnosti k zapamatování
Základní:

color, background-color, background-image
font-size, font-family, font-weight
margin, padding, border
width, height, max-width, min-height

Pozicování:

position: static | relative | absolute | fixed | sticky
top, right, bottom, left
z-index

Display:

display: block | inline | inline-block | flex | grid | none

Moderní:

transform, transition, animation
filter, backdrop-filter
clip-path, mask

🎨 Best practices

Organizace CSS:
css/* 1. Reset/Normalize */
/* 2. Proměnné */
/* 3. Base styles */
/* 4. Layout */
/* 5. Components */
/* 6. Utilities */

Pojmenování tříd (BEM):
css.block {}
.block__element {}
.block--modifier {}

Responzivní breakpointy:
css/* Mobile first */
/* Tablet */
@media (min-width: 768px) {}
/* Desktop */
@media (min-width: 1024px) {}
/* Large desktop */
@media (min-width: 1440px) {}

007: 
📚 Souhrn lekce: JavaScript 1
🎯 Co jsme se naučili
1. Co je JavaScript

Skriptovací jazyk - interpretovaný, ne kompilovaný
Dynamicky typovaný - typy se určují za běhu
Objektově orientovaný - vše je objekt nebo primitiv
Single-threaded - ale s možností web workers
Univerzální - běží v prohlížeči i na serveru (Node.js)
Neustále se vyvíjí - nové API a syntaxe

javascriptfunction test(cislo) {
    return [cislo];
}

const osoba = {
    jmeno: "Jan",
};

console.log(test(5)); // Vypíše [5]
2. Datové typy
Primitivní typy (předávají se hodnotou):

string - textové řetězce
number - celá i desetinná čísla
boolean - true/false
undefined - nedefinovaná hodnota
null - úmyslná absence hodnoty
symbol - unikátní identifikátor
bigint - velká čísla

Referenční typy (předávají se referencí):

object - objekty, pole, funkce
function - funkce

javascript// Primitivní - kopie hodnoty
let a = 1;
const b = a;
a = 4;
console.log(b); // 1

// Referenční - odkaz na stejný objekt
const a = [1, 2, 3];
const b = a;
a[0] = 99;
console.log(b[0]); // 99
3. Auto-boxing
javascriptconst foo = 'ahoj';
console.log(foo.toUpperCase()); // "AHOJ"
// JavaScript automaticky obalí string do String objektu
4. Proměnné a scope
javascript// Deklarace
var oldWay = 1;      // Function scope, hoisting
let modern = 2;      // Block scope
const constant = 3;  // Block scope, nelze přeřadit

// Falsy hodnoty: 0, "", null, undefined, false, NaN
// Truthy: vše ostatní
5. Operátory
javascript// Přiřazení
foo.email ??= "default@email.com";  // Nullish coalescing assignment

// Porovnání
"1" == 1;   // true (type coercion)
"1" === 1;  // false (strict equality)

// Logické
value1 && value2;  // AND
value1 || value2;  // OR
value1 ?? value2;  // Nullish coalescing

// Optional chaining
console.log(user?.address?.street);  // Bezpečný přístup

// Zkrácené
x += 2;  // x = x + 2
x++;     // x = x + 1
6. Funkce
javascript// Function declaration (hoisting)
function test(param1, param2) {
    return param1 + param2;
}

// Function expression
const test2 = function(param1, param2) {
    return param1 + param2;
};

// Arrow function (moderní)
const test3 = (param1, param2 = 10) => {
    return param1 + param2;
};

// Zkrácený zápis
const test4 = (x) => x * 2;

// IIFE (Immediately Invoked Function Expression)
(function() {
    console.log("Spustí se hned");
})();
Čisté funkce:

Pro stejné vstupy vždy stejný výstup
Žádné side effects
Předvídatelné a testovatelné

7. This
javascript// Globální kontext
console.log(this); // window (browser) / global (Node.js)

// Metoda objektu
const obj = {
    name: "Test",
    greet: function() {
        console.log(this.name); // "Test"
    }
};

// Arrow funkce - nemá vlastní this
const obj2 = {
    name: "Test",
    greet: () => {
        console.log(this); // Rodičovský scope
    }
};

// Konstruktor
function Person(name) {
    this.name = name; // this = nová instance
}
const person = new Person("Jan");
8. Closure
javascript// Problém s var
for (var i = 0; i < 5; i++) {
    setTimeout(() => console.log(i), 100); // Vypíše 5x číslo 5
}

// Řešení s let
for (let i = 0; i < 5; i++) {
    setTimeout(() => console.log(i), 100); // Vypíše 0,1,2,3,4
}

// Řešení s IIFE
for (var i = 0; i < 5; i++) {
    (function(index) {
        setTimeout(() => console.log(index), 100);
    })(i);
}
9. Destructuring
javascript// Array destructuring
const cisla = [1, 2, 3];
const [prvni, druhy, treti] = cisla;
const [, , jenTreti] = cisla; // Přeskočení hodnot

// Object destructuring
const osoba = { jmeno: "Jan", vek: 30 };
const { jmeno, vek: stari } = osoba; // Přejmenování

// V parametrech funkce
const getAge = ({ vek }) => vek;
const getAgeWithDefault = ({ vek = 0 } = {}) => vek;

// Spread operator
const newArray = [...cisla, 4, 5];
const newObject = { ...osoba, mesto: "Praha" };
💪 Co byste měli nyní ovládat

Datové typy:

Rozlišit primitivní a referenční typy
Pochopit rozdíl v předávání hodnot
Používat typeof operátor


Proměnné:

Kdy použít let, const, nikdy var
Rozumět scope a hoisting
Znát falsy/truthy hodnoty


Funkce:

Všechny způsoby zápisu
Výhody arrow funkcí
Parametry a defaultní hodnoty


This:

Jak se mění v různých kontextech
Kdy použít arrow funkci
Bind, call, apply metody


Moderní syntaxe:

Destructuring objektů a polí
Spread/rest operátor
Optional chaining (?.)
Nullish coalescing (??)



🚀 Doporučené kroky k procvičení

Datové typy:
javascript// Vyzkoušejte předávání hodnot
// Vytvořte funkci, která mění primitivní vs referenční typ

This kontext:
javascript// Vytvořte objekt s metodami
// Zkuste různé způsoby volání
// Použijte bind() pro fixaci this

Destructuring:
javascript// Rozložte složitější objekty
// Použijte v parametrech funkcí
// Kombinujte s default hodnotami

Closure:
javascript// Vytvořte funkci vracející funkci
// Implementujte privátní proměnné
// Vyřešte setTimeout problém


⚠️ Důležitá upozornění

Vždy používejte === místo ==
Preferujte const, pak let, nikdy var
Arrow funkce pro callbacky a krátké funkce
Pozor na this - může být jiné než čekáte
Nezapomeňte na default hodnoty u destructuring
Undefinované vlastnosti - používejte optional chaining

📋 Nejčastější chyby

Type coercion: "5" + 3 = "53" ale "5" - 3 = 2
This v callbacku: Ztráta kontextu
Hoisting: Používání proměnné před deklarací
Mutace objektů: Nechtěná změna sdíleného objektu
Falsy hodnoty: 0 nebo "" vyhodnocené jako false

🔍 Debugging tipy
javascript// Console metody
console.log("Hodnota:", value);
console.table(array);
console.group("Skupina");
console.error("Chyba!");
console.time("Timer");

// Debugger
debugger; // Zastaví vykonávání

// Typeof pro kontrolu typů
console.log(typeof variable);

// JSON.stringify pro objekty
console.log(JSON.stringify(obj, null, 2));